{"version":3,"sources":["assets/Lady.jpeg","assets/Leaves.jpg","components/ParallaxNew.js","Home.js","About.js","Others.js","Mismatch.js","components/CustomNavbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ParallaxNew","bgImage","Lady","strength","style","height","width","Container","fluid","Row","className","Col","md","Jumbotron","backgroundColor","color","Button","variant","backgroundImage","require","backgroundAttachment","backgroundPosition","backgroundSize","Home","About","Others","Mismatch","CustomNavbar","props","type","Navbar","collapseOnSelect","expand","bg","to","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","App","Fragment","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,mC,4ECA3CD,EAAOC,QAAU,IAA0B,oC,gLC4D5BC,EA3CK,kBAChB,6BACI,kBAAC,WAAD,CAAUC,QAASC,IAAMC,SAAU,KAC/B,yBAAKC,MAAO,CAAEC,OAAQ,QAASC,MAAO,SAClC,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAKC,UAAU,6BACX,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAWT,MAAO,CAAEU,gBAAiB,aAAeJ,UAAU,0BAC1D,wCACA,uBAAGN,MAAO,CAAEW,MAAO,SAAnB,6EAGA,2BACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,QAAhB,iBAIZ,kBAACN,EAAA,EAAD,UAShB,yBAAKD,UAAU,YACXN,MAAO,CACHc,gBAAiBC,EAAQ,IACzBL,gBAAiB,QAEjBT,OAAQ,OACRe,qBAAsB,QACtBC,mBAAoB,SACpBC,eAAgB,WAGxB,kBAAC,WAAD,CAAUrB,QAASC,IAAMC,SAAU,KAC/B,yBAAKC,MAAO,CAAEC,OAAQ,QAASC,MAAO,aCrDrCiB,EAAO,kBAChB,kBAAC,EAAD,OCASC,EAAQ,kBAGb,kBAAC,EAAD,OCJKC,G,MAAS,kBAClB,6BACI,2CACA,yDCJKC,EAAW,kBACpB,6BACI,6CACA,kD,wBCsCOC,MArCf,SAAsBC,GACpB,OACE,oCACE,2BAAOC,KAAK,YAAZ,2MAYA,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOhB,QAAQ,QACrD,kBAAC,gBAAD,CAAeiB,GAAG,KACpB,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,KAAK,KAAxB,SAEE,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAK/B,UAAU,WACb,kBAAC,gBAAD,CAAewB,GAAG,UAChB,kBAACO,EAAA,EAAIC,KAAL,eAEF,kBAAC,gBAAD,CAAeR,GAAG,WAChB,kBAACO,EAAA,EAAIC,KAAL,qB,eCACC,MAlBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,gBAAD,KACE,kBAAC,EAAD,MACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxB,IACjC,kBAAC,IAAD,CAAOuB,KAAK,YAAYC,UAAWxB,IACnC,kBAAC,IAAD,CAAOuB,KAAK,SAASC,UAAWvB,IAChC,kBAAC,IAAD,CAAOsB,KAAK,UAAUC,UAAWtB,IACjC,kBAAC,IAAD,CAAOsB,UAAWrB,Q,QCZVsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,mBAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bf4fe668.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Lady.20456918.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Leaves.a22a387d.jpg\";","import React from 'react';\r\nimport { Parallax } from 'react-parallax';\r\nimport Lady from '../assets/Lady.jpeg'\r\n// import Leaves from '../assets/Leaves.jpg'\r\n// import Boat from '../assets/Boat.mp4'\r\nimport { Container, Row, Col, Jumbotron, Button } from 'react-bootstrap';\r\n\r\nconst inlineStyle = {\r\n    background: '#ffff',\r\n    left: '50%',\r\n    top: '50%',\r\n    position: 'absolute',\r\n    padding: '20px',\r\n    transform: 'translate(-50%, -50%)',\r\n}\r\n\r\n\r\nconst ParallaxNew = () => (\r\n    <div>\r\n        <Parallax bgImage={Lady} strength={990}>\r\n            <div style={{ height: '100vh', width: '100%' }}>\r\n                <Container fluid>\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <Col></Col>\r\n                        <Col md={6}>\r\n                            <Jumbotron style={{ backgroundColor: '#bebfd67d' }} className=\"align-self-center m-5 \">\r\n                                <h1>Welcome!</h1>\r\n                                <p style={{ color: 'snow' }}>\r\n                                    This is not a fully functional site, just a showcase of some web designs.\r\n                                </p>\r\n                                <p>\r\n                                    <Button variant=\"dark\">Learn more</Button>\r\n                                </p>\r\n                            </Jumbotron>\r\n                        </Col>\r\n                        <Col></Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </div>\r\n        </Parallax>\r\n\r\n       \r\n\r\n        <div className='parallax1'\r\n            style={{\r\n                backgroundImage: require(\"../assets/Leaves.jpg\"),\r\n                backgroundColor: 'black',\r\n                // position: 'relative',\r\n                height: '70vh',\r\n                backgroundAttachment: 'fixed',\r\n                backgroundPosition: 'center',\r\n                backgroundSize: 'cover'\r\n            }}></div>\r\n            \r\n        <Parallax bgImage={Lady} strength={990}>\r\n            <div style={{ height: '100vh', width: '100%' }}></div>\r\n        </Parallax>\r\n    </div>\r\n);\r\nexport default ParallaxNew;","import React, { Component } from 'react'\r\nimport ParallaxNew from './components/ParallaxNew';\r\n\r\nexport const Home = () => (\r\n    <ParallaxNew />\r\n)","import React, { Component } from 'react';\r\nimport ParallaxNew from './components/ParallaxNew';\r\n\r\n\r\nexport const About = () => (\r\n    // <div style={{ backgroundImage: `url('${Leaves}')` }}>\r\n    //    <ParallaxImage /> \r\n        <ParallaxNew />\r\n    // </div>\r\n)","import React, { Component } from 'react';\r\nimport './Others.css';\r\n\r\nexport const Others = () => (\r\n    <div>\r\n        <h2>Others Page</h2>\r\n        <p>This is the others page</p>\r\n    </div>\r\n)","import React, { Component } from 'react'\r\n\r\nexport const Mismatch = () => (\r\n    <div>\r\n        <h2>Mismatch page</h2>\r\n        <p>Oops, wrong page!</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav'\r\n// import NavDropdown from 'react-bootstrap/NavDropdown'\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n\r\nfunction CustomNavbar(props) {\r\n  return (\r\n    <>\r\n      <style type=\"text/css\">\r\n        {`\r\n        .bg-purp {\r\n          background-color: #242e33!important;\r\n        }\r\n        .nav-link:hover {\r\n          // text-transform: uppercase;\r\n          color:  !important;\r\n        }\r\n        `}\r\n      </style>\r\n\r\n      <Navbar collapseOnSelect expand=\"sm\" bg=\"purp\" variant=\"dark\">\r\n        <LinkContainer to='/'>\r\n      <Navbar.Brand href=\"/\">{'  '}Home</Navbar.Brand>\r\n        </LinkContainer>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <LinkContainer to='/about'>\r\n              <Nav.Link>About</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to='/others'>\r\n              <Nav.Link>Others</Nav.Link>\r\n            </LinkContainer>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default CustomNavbar;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Home } from './Home';\nimport { About } from './About';\nimport { Others } from './Others';\nimport { Mismatch } from './Mismatch';\n// import { Layout } from './components/Layout';\nimport CustomNavbar from './components/CustomNavbar';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        <CustomNavbar />\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/website/' component={Home} />\n            <Route path='/about' component={About} />\n            <Route path='/others' component={Others} />\n            <Route component={Mismatch} />\n          </Switch>\n      </Router>\n    </React.Fragment>\n    // <About />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ParallaxProvider } from 'react-scroll-parallax';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ParallaxProvider>\n      <App />\n    </ParallaxProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}